<% start_date = LaborCost.by_project(@project).order(:date).first.date %>
<% data = (@project.tasks & Task.joins(:labor_costs)).map do |task| %>
  <% # [task_name, [labor_date, labor_date, labor_date], [deadline_name, deadline_date]] %>
  <% {
    :start => rand(10),
    :end => rand(10)+10,
    :task_name => "#{task.name} #{number_to_percentage task.percent_complete, :precision => 0} est, #{number_to_percentage( task.percent_of_estimated || 0, :precision => 0)} spent", 
    :task_start => task.labor_costs.last.date - start_date,
    :task_end => (task.is_complete? ? task.labor_costs.first.date : Date::today) - start_date,
    :labor_costs => task.labor_costs.all.reverse.map {|lc| lc.date - start_date }, 
    :deadline => task.deadline.blank? ? [nil,nil] : [task.deadline.name, task.deadline.date - start_date] 
    } %>
<% end %>


var scale = <%= 400/(Date::today - start_date) %>;
var data = <%= raw data.to_json %>;

var w = 800,
    h = 400,
    kx = <%= (Date::today - start_date) %>,
    ky = 1,
    x = pv.Scale.linear(0, kx).range(0, w/1.25);
    
vis = new pv.Panel()
    .width(w)
    .height(h)
    .top(30)
    .left(40)
    .right(20)
    .bottom(20)
  .add(pv.Panel)
    .data(data);
    
// Task bars
vis.add(pv.Bar)
    .height(20)
    .top(function() vis.index * 25)
    .width(function(d) x(d['task_end']) - x(d['task_start']) )
    .left(function(d) x(d['task_start']) -1  )
    .fillStyle(pv.color('rgba(0,0,0,.1)') )
  .anchor('right').add(pv.Label)
    .textAlign('left')
    .text(function(d) d['task_name']);

// Labor stripes
vis.add(pv.Bar)
  .data(function(d) d['labor_costs'] )
  .height(18)
  .top(function() vis.index * 25 + 1 )
  .width(x(.65))
  .left(function(d) x(d));

// Pan/zoom panel 
vis.add(pv.Panel)
    .events("all")
    .event("mousedown", pv.Behavior.pan())
    .event("mousewheel", pv.Behavior.zoom())
    .event("pan", transform)
    .event("zoom", transform);
     
// Deadlines
vis.add(pv.Panel)
.add(pv.Dot)
  .visible(function(d) d['deadline'][1])
  .left(function(d) x(d['deadline'][1]))
  .top(function() vis.index * 25 + 10)
  .strokeStyle('red')
  .fillStyle(pv.rgb(255, 0, 0, .25))
  .radius(function() 6 / this.scale);
  
    
function transform() {
  var t = this.transform().invert();
  var k = Math.pow(t.k, 20);
  
  x.domain( kx-(kx*k)+(t.x*(kx/w*k)), kx+(t.x*(kx/w*k)));
  vis.render();
}

vis.render();
