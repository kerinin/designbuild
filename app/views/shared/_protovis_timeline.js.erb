<% tasks ||= @project.tasks %>
<% start_date = LaborCost.by_project(@project).order(:date).first.date %>
<% data = tasks.all(:order => 'percent_complete DESC').map do |task| %>
  <% {
    :task_name => "#{task.name} #{number_to_percentage task.percent_complete, :precision => 0} est, #{number_to_percentage( task.percent_of_estimated || 0, :precision => 0)} spent", 
    :task_start => task.labor_costs.empty? ? Date::today - start_date : task.labor_costs.last.date - start_date,
    :task_end => (task.is_complete? ? task.labor_costs.first.date : Date::today) - start_date,
    :labor_costs => task.labor_costs.all.reverse.map{ |lc| 
      {:id => lc.id,
      :percent_complete => lc.percent_complete,
      :percent_of_estimated => lc.task.version_at(lc.date).nil? || lc.task.version_at(lc.date).percent_of_estimated.nil? ? lc.percent_complete : lc.task.version_at(lc.date).percent_of_estimated,
      :label => lc.task.version_at(lc.date).nil? || lc.task.version_at(lc.date).percent_of_estimated.nil? ? "#{number_to_percentage lc.percent_complete, :precision => 0} complete" : "#{number_to_percentage lc.percent_complete, :precision => 0} complete, #{number_to_percentage lc.task.version_at(lc.date).percent_of_estimated, :precision => 0} of est.", 
      :date => lc.date - start_date }
    }, 
    :deadline => task.deadline.blank? ? {:id => nil, :name => nil, :date => nil, :label => nil } : {:id => task.deadline.id, :name => task.deadline.name, :date => task.deadline.date - start_date, :label => "#{task.deadline.name}: #{task.deadline.date.strftime('%b %d')}" }
    } %>
<% end %>
<% weeks = (0..60).to_a.reverse.map{|week| day = weekday(1, (week-4).weeks.ago.to_date ); {:name => day.strftime('%b %d'), :value => day - start_date}} %>


var scale = <%= 400/((Date::today - start_date) || 400) %>;
var data = <%= raw data.to_json %>;
var weeks = <%= raw weeks.to_json %>;
var rangeStart = <%= Date::today - start_date > 60 ? (Date::today - start_date) - 60 : Date::today - start_date %>;
var rangeEnd = <%= (Date::today - start_date) + 7 %>;

var w = <%= width %>,
    h = <%= height %>,
    x = pv.Scale.linear(rangeStart, rangeEnd).range(0, w/1.25);
    y = pv.Scale.linear(0, <%= tasks.count %>).range(0, <%= tasks.count %> * 25);
    ww = pv.Scale.linear(0, (rangeEnd - rangeStart)).range(0, w/1.25);
    color = pv.Scale.linear(0, 75, 100).range('green', 'yellow', 'red');
    
vis = new pv.Panel()
    .def('hover', [-1,-1])
    .width(w)
    .height(h);
        
 
// Week Highlighting
var weeks = vis.add(pv.Bar)
    .data( weeks )
    .top(0)
    .bottom(0)
    .width( function(d) ww(5) )
    .left( function(d) x(d['value']) )
    .fillStyle(pv.color('rgba(0,0,0,.05)') );
    

// Task bars
var tasks = vis.add(pv.Bar)
    .data(data)
    .height(20)
    .top( function() y( this.index ) )
    .width( function(d) x(d['task_end']) - x(d['task_start']) )
    .left( function(d) x(d['task_start']) - 1  )
    .fillStyle( pv.color('rgba(0,0,0,.1)') );

  
// Pan/zoom panel 
vis.add(pv.Panel)
    .events("all")
    .event("mousedown", pv.Behavior.pan())
    .event("mousewheel", pv.Behavior.zoom())
    .event("pan", transform)
    .event("zoom", transform);
    
    
// Labor stripes
var labor = vis.add(pv.Panel)
    .data(data);
var labor_bars = labor.add(pv.Bar)
    .data( function(d) d['labor_costs'] )
    .height(8)
    .top( function() y(labor.index) + 1 )
    .width( function(d) ww(1)-2 )
    .left( function(d) x(d['date']) )
    .fillStyle( function(d) color( d['percent_complete'] ) )
    .event('mouseover', function(d) vis.hover( ['labor', d['id']] ) )
    .event('mouseout', function(d) vis.hover( [-1,-1] ) )
  .add(pv.Bar)
    .top( function() y(labor.index) + 10 )
    .fillStyle( function(d) color( d['percent_of_estimated'] ) )
    .event('mouseover', function(d) vis.hover( ['labor', d['id']] ) )
    .event('mouseout', function(d) vis.hover( [-1,-1] ) );

// Deadlines
tasks.add(pv.Dot)
    .visible(function(d) d['deadline']['date'] )
    .left(function(d) x(d['deadline']['date']) )
    .top(function() y( this.index ) + 10)
    .strokeStyle('blue')
    .fillStyle(pv.rgb(0, 0, 255, .25))
    .radius(function() 6 / this.scale)
    .event('mouseover', function(d) vis.hover( ['deadline', d['deadline']['id'] ] ) )
    .event('mouseout', function(d) vis.hover( [-1,-1] ) )
  .anchor('top').add(pv.Label)
    .textBaseline('bottom')
    .text( function(d) d['deadline']['label'] )
    .visible( function(d) vis.hover()[0] == 'deadline' && vis.hover()[1] == d['deadline']['id'] );


// Labels
tasks.anchor('right').add(pv.Label)
    .textAlign('left')
    .text(function(d) d['task_name']);
weeks.anchor('bottom').add(pv.Label)
    .text( function(d) d['name'] );
labor_bars.anchor('top').add(pv.Label)
    .text( function(d) d['label'] )
    .textBaseline('bottom')
    .visible( function(d) vis.hover()[0] == 'labor' && vis.hover()[1] == d['id'] );      
    
function transform() {
  var t = this.transform().invert();
  var k = Math.pow(t.k, 20);
  
  var xspan = rangeEnd - rangeStart;
  
  var xlow = rangeEnd-(xspan*k)+(t.x*(xspan/w*k));
  var xhigh = rangeEnd+(t.x*(xspan/w*k));
  
  x.domain( xlow, xhigh );
  ww.domain( 0, (xhigh - xlow) );
  
  y.range( -t.y, <%= tasks.count %> * 25 - t.y);
  vis.render();
}

vis.render();
