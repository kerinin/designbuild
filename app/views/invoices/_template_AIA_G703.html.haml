%table.aia_g703
  %tr
    %td.control{:rowspan => 2} Expand
    %th.number{:rowspan => 2} Item No.
    %th{:rowspan => 2} Description of Work
    %th.currency{:rowspan => 2} Scheduled Value
    %th{:colspan => 2} Work Completed
    %th.currency{:rowspan => 2} Materials Presently Stored
    %th.currency{:rowspan => 2} Total Completed and Stored
    %th.number{:rowspan => 2} %
    %th.currency{:rowspan => 2} Balance to Finish
    %th.currency{:rowspan => 2} Retainage
    
  %tr
    %th.currency From Previous Application
    %th.currency This Period
    
  -i = 1 + ( ((params[:page] || 1).to_i - 1) * 20 )
  
  -@project.components.roots.each do |component|
    =render :partial => 'template_AIA_G703_recursion', :locals => {:component => component, :i => i}
    -i += 1
  
  -@invoice.markup_lines.each do |markup_line|
    -all_lines = InvoiceMarkupLine.includes(:invoice).where('invoices.project_id = ?', @project.id).where(:markup_id => markup_line.markup_id)
    -scheduled = markup_line.markup.apply_recursively_to(@project, :estimated_cost_markup_amount)
    -to_date = all_lines.sum(:labor_invoiced) + all_lines.sum(:material_invoiced)
    
    %tr
      %td.control
      %td.number
      %td="#{markup_line.markup.name} (#{number_to_percentage markup_line.markup.percent, :precision => 0})"
      
      / Scheduled Value
      %td.currency= number_to_currency scheduled
      
      / Work Completed - From previous applications
      %td.currency= number_to_currency all_lines.where('invoices.date <= ?', @invoice.date - 1).sum(:labor_invoiced)
      
      / Work Completed - This Period
      %td.currency= number_to_currency markup_line.labor_invoiced
      
      / Materials Presently Stored
      %td.currency= number_to_currency markup_line.material_invoiced
      
      / Total Completed and Stored
      %td.currency= number_to_currency to_date
      
      / %
      %td.number= number_to_percentage 100 * (to_date / scheduled ), :precision => 0
  
      / Balance to finish
      %td.currency= number_to_currency scheduled - to_date
      
      / Retainage
      %td.currency= number_to_currency all_lines.sum(:labor_retainage) + all_lines.sum(:material_retainage)

  %tr
    %td.control
    %th.number
    %th Grand Totals
    
    / Scheduled Value
    %th.currency= number_to_currency @project.estimated_cost
    
    / Work Completed - From previous applications
    %th.currency= number_to_currency @project.labor_invoiced_before(@invoice.date - 1)
    
    / Work Complete - This period
    %th.currency= number_to_currency @project.labor_invoiced_before(@invoice.date) - @project.labor_invoiced_before(@invoice.date - 1)
    
    / Materials Presently Stored
    %th.currency= number_to_currency @project.material_invoiced_before(@invoice.date) - @project.material_invoiced_before(@invoice.date - 1)
    
    / Total Completed and Stored
    %th.currency= number_to_currency @project.invoiced_before(@invoice.date)
    
    / %
    %th.number
      -if !@project.estimated_cost.nil? && @project.estimated_cost > 0 && !@project.invoiced_before(@invoice.date).nil?
        = number_to_percentage 100 * @project.invoiced_before(@invoice.date) / @project.estimated_cost, :precision => 0
    
    / Balance to finish
    %th.currency= number_to_currency subtract_or_nil @project.estimated_cost, @project.invoiced_before(@invoice.date)
    
    / Retainage
    %th.currency= number_to_currency @project.retainage_before(@invoice.date)